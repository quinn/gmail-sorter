package ui

import (
	"encoding/json"
	"github.com/quinn/gmail-sorter/internal/web/middleware"
	"github.com/quinn/gmail-sorter/internal/web/models"
	"go.quinn.io/ccf/assets"
)

templ Layout(links []models.ActionLink) {
	{{
		c := middleware.GetEcho(ctx)
		shortcuts := models.AssignShortcuts(links)
	}}
	<!DOCTYPE html>
	<html>
		<head>
			<title>{ middleware.GetTitle(ctx) }</title>
			<link rel="stylesheet" href={ assets.Path("css/styles.css") }/>
			<link rel="stylesheet" href={ assets.Path("fonts/fonts.css") }/>
			<script src={ assets.Path("js/htmx.js") } defer></script>
		</head>
		<body class="body" hx-indicator="#htmx-loading-indicator">
			<div id="flash" class="fixed bottom-0 right-0 p-4 min-w-80 z-50"></div>
			<div id="htmx-loading-indicator" class="fixed inset-0 z-50 flex items-center justify-center bg-white/70 dark:bg-black/70 hidden" aria-hidden="true">
				<div class="w-12 h-12 border-4 border-gray-200 border-t-blue-600 rounded-full animate-spin" role="status" aria-label="Loading"></div>
			</div>
			<div id="modal" class="fixed inset-0 z-50 pointer-events-none"></div>
			<div class="overflow-y-auto">
				{ children... }
			</div>
			<button
				class="fixed top-4 right-4 p-1 bg-gray-100 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-full"
				hx-trigger="click"
				hx-target="#modal"
				hx-get={ c.Echo().Reverse("menu") }
			>
				@Icon("gear", "size-12")
			</button>
			<div class="flex bg-gray-200 dark:bg-gray-700 gap-[1px] p-[1px]">
				for i, link := range links {
					{{
						action := link.Action()
						shortcut := string(shortcuts[i])
						var params []interface{}
						for _, param := range link.Params {
							params = append(params, param)
						}
					}}
					<form
						class="grow"
						if link.Confirm {
							action="/confirm"
							method="GET"
						} else {
							action={ templ.URL(c.Echo().Reverse(action.ID, params...)) }
							method={ action.Method }
						}
						hx-trigger={ "click, keyup[key=='" + shortcut + "'] from:body" }
						hx-boost="true"
					>
						if link.Confirm {
							<input type="hidden" name="link" value={ encodeJSON(link) }/>
						} else {
							if link.Fields != nil {
								for name, value := range link.Fields {
									<input type="hidden" name={ name } value={ value }/>
								}
							}
						}
						<button class="w-full p-3 bg-gray-100 dark:bg-gray-800">
							{ action.Label(link) } [{ shortcut }]
						</button>
					</form>
				}
			</div>
		</body>
	</html>
}

func encodeJSON(v any) string {
	b, err := json.Marshal(v)
	if err != nil {
		return ""
	}
	return string(b)
}
